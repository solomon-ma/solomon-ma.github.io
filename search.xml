<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx WSGI Flask</title>
    <url>/2020/02/27/Nginx-WSGI-Flask/</url>
    <content><![CDATA[<img src="https://tva1.sinaimg.cn/large/00831rSTly1gcb9vz74wrj30ek0wo0wr.jpg" alt="image-20200227211857243" style="zoom:50%;" />

<p>Web服务器层： Nginx</p>
<p>Web框架层： Flask</p>
<p>WSGI层： uwsgi</p>
<h3 id="Web-服务器层"><a href="#Web-服务器层" class="headerlink" title="Web 服务器层"></a>Web 服务器层</h3><p>传统的客户端-服务器架构，服务器作用是：</p>
<ul>
<li>接收请求</li>
<li>处理请求</li>
<li>返回响应</li>
</ul>
<p>常见的web服务器有Nginx， Apache， IIS等。</p>
<h3 id="Web框架层"><a href="#Web框架层" class="headerlink" title="Web框架层"></a>Web框架层</h3><p>Web框架层的作用主要是为了方便我们开发Web应用程序，HTTP请求的动态数据就是Web框架层来提供的。常见的Web框架有Flask， Django等。下面是一个Flask框架的例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<p>大致说明一下上述代码的含义。</p>
<ul>
<li>创建了一个Web应用程序，名称app</li>
<li>app使得所有机器均可访问该机器的8080端口</li>
<li>HTTP协议使用URL来定位资源，路径/hello，类似于我们通过浏览器要访问<a href="http://www.xxx.com/hello" target="_blank" rel="noopener">www.xxx.com/hello</a></li>
<li>hello界面返回字符串Hello World！</li>
</ul>
<h3 id="WSGI层"><a href="#WSGI层" class="headerlink" title="WSGI层"></a>WSGI层</h3><p>WSGI(Web Server Gateway Interface)</p>
<p>WSGI只是一种接口，仅适用于python语言，它定义了Web服务器和Web应用之间的接口规范。也就是说只要Web服务器和Web应用都遵守了WSGI协议，那么Web服务器和Web应用就可以随意组合。</p>
<p>举个例子，WSGI就像是我们打电话时中间的媒介。拨通电话之后，我们只需要说话，不用担心中间语音是如何处理如何传输的，也不需要担心移动的号码如何往联通的转换，国内的号码如何和国外的号码通过之类的问题。这里的WSGI就是帮助处理和传输工作的。</p>
<h4 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h4><p><a href="https://blog.csdn.net/lihao21/article/details/52304119" target="_blank" rel="noopener">https://blog.csdn.net/lihao21/article/details/52304119</a></p>
]]></content>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>uwsgi 安装问题</title>
    <url>/2020/02/26/uwsgi-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>使用<code>pip install uwsgi</code>安装的时候会出现各种有的没的问题，这里不再一一列举，仅放出解决方案</p>
<p>错误提示基本上都会爆出gcc的问题</p>
<p>这里需要将机器的gcc默认版本降为4.7</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get install gcc-4.7</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/usr/bin</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">ln -s gcc-4.7 gcc</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install uwsgi</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>flask部署pytorch</title>
    <url>/2020/02/22/flask%E9%83%A8%E7%BD%B2pytorch/</url>
    <content><![CDATA[<h3 id="用flask部署深度学习微服务"><a href="#用flask部署深度学习微服务" class="headerlink" title="用flask部署深度学习微服务"></a>用flask部署深度学习微服务</h3><p>部署期间发生了端口访问不到的问题，详情请参见nginx反向代理</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl https:<span class="regexp">//</span>flask.havon.cn<span class="regexp">/predict?url=https:/</span><span class="regexp">/media.minutouno.com/</span>adjuntos<span class="regexp">/150/im</span>agenes<span class="regexp">/028/</span><span class="number">853</span><span class="regexp">/0028853430.jpg</span></span><br></pre></td></tr></table></figure>







<h4 id="reference："><a href="#reference：" class="headerlink" title="reference："></a>reference：</h4><p><a href="https://medium.com/datadriveninvestor/deploy-your-pytorch-model-to-production-f69460192217" target="_blank" rel="noopener">https://medium.com/datadriveninvestor/deploy-your-pytorch-model-to-production-f69460192217</a></p>
]]></content>
  </entry>
  <entry>
    <title>kubernetes</title>
    <url>/2020/02/14/kubernetes/</url>
    <content><![CDATA[<h2 id="使用阿里源"><a href="#使用阿里源" class="headerlink" title="使用阿里源"></a>使用阿里源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS/RHEL/Fedora</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">setenforce 0</span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>透过跳板机访问服务器的jupyter notebook</title>
    <url>/2020/02/12/%E9%80%8F%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84jupyter-notebook/</url>
    <content><![CDATA[<h3 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h3><p><a href="http://whatbeg.com/2018/12/05/jupyternotebook-1.html" target="_blank" rel="noopener">http://whatbeg.com/2018/12/05/jupyternotebook-1.html</a></p>
]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>网络端口</title>
    <url>/2020/02/12/port/</url>
    <content><![CDATA[<ol>
<li>查看端口是否允许访问</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">telnet 服务器IP 端口号</span><br><span class="line">telnet <span class="number">10.10</span><span class="number">.10</span><span class="number">.8</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>查看端口是否被占用</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">lsof -i:端口号</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">lsof -i:8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">上述命令会返回端口占用程序的pid</span></span><br><span class="line"><span class="attr">kill</span> <span class="string">-9 pid</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-12</title>
    <url>/2020/01/03/2019-12/</url>
    <content><![CDATA[<h1 id="12月工作总结"><a href="#12月工作总结" class="headerlink" title="12月工作总结"></a>12月工作总结</h1><h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h2><h3 id="1-完成视频帧的抽取流程"><a href="#1-完成视频帧的抽取流程" class="headerlink" title="1. 完成视频帧的抽取流程"></a>1. 完成视频帧的抽取流程</h3><ul>
<li>主要操作文件<ul>
<li>actioncam/modules/param/inicfg/hi3559v200/imx458_512M/config_product_workmode_record.ini</li>
<li>actioncam/modules/param/inicfg/hi3559v200/imx458_512M/config_product_workmode_common.ini</li>
<li>actioncam/modules/statemng/src/hi_product_statemng_rec.c</li>
<li>common/videodetect/*</li>
</ul>
</li>
<li>操作需要注意的点<ul>
<li>Hi3559V200的芯片中对media的操作推荐直接使用HI_MAPI模块，参考《HiMAPI V1.0 媒体处理开发参考》。</li>
<li>使用HI_MAPI_VPROC_GetPortFrame的条件<ul>
<li>vpss工作在User模式下</li>
<li>vpss的depth属性要大于1</li>
</ul>
</li>
<li>区分media参数配置文件夹下的workmode和mediamode，我们需要修改的是config_product_workmode_record.ini</li>
</ul>
</li>
</ul>
<h3 id="2-熟悉各种工作效率工具"><a href="#2-熟悉各种工作效率工具" class="headerlink" title="2. 熟悉各种工作效率工具"></a>2. 熟悉各种工作效率工具</h3><ul>
<li>阅读大型项目工具sourcetrail</li>
<li>远程开发 VSCode 插件 Remote-ssh</li>
<li>Linux下搜索工具 the silver search</li>
</ul>
<h3 id="3-补充知识学习"><a href="#3-补充知识学习" class="headerlink" title="3. 补充知识学习"></a>3. 补充知识学习</h3><ul>
<li>线程的互斥锁，信号量</li>
</ul>
<h3 id="4-修复bug"><a href="#4-修复bug" class="headerlink" title="4. 修复bug"></a>4. 修复bug</h3><ul>
<li><p>0xA007800E 图像队列为空</p>
<ul>
<li>修改vport的depth，通过HI_MAPI_VPROC_SetVPSSDumpYUVAttr</li>
<li>由于vport无法进行热修改，因此在操作时需要先stopvport，待修改depth完成后，再次startvport</li>
</ul>
</li>
<li><p>0xA0078009 操作不允许</p>
<ul>
<li>vport被占用，通过修改config文件中的对应group的对应port的使能开关</li>
</ul>
</li>
</ul>
<h2 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h2><h3 id="1-继续完善sourcetrail工具"><a href="#1-继续完善sourcetrail工具" class="headerlink" title="1. 继续完善sourcetrail工具"></a>1. 继续完善sourcetrail工具</h3><ul>
<li>配置tabnine代码补全工具的模型版</li>
<li>使用bear工具自动生成所有依赖库路径</li>
</ul>
<h3 id="2-梳理海思架的videodetect模块"><a href="#2-梳理海思架的videodetect模块" class="headerlink" title="2. 梳理海思架的videodetect模块"></a>2. 梳理海思架的videodetect模块</h3><h3 id="3-在videodetect框架下书写算法调用过程代码"><a href="#3-在videodetect框架下书写算法调用过程代码" class="headerlink" title="3. 在videodetect框架下书写算法调用过程代码"></a>3. 在videodetect框架下书写算法调用过程代码</h3><h3 id="4-补充知识学习"><a href="#4-补充知识学习" class="headerlink" title="4. 补充知识学习"></a>4. 补充知识学习</h3><ul>
<li>有限状态机模式</li>
</ul>
<h2 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h2><h3 id="1-梳理svp-runtime模块"><a href="#1-梳理svp-runtime模块" class="headerlink" title="1. 梳理svp_runtime模块"></a>1. 梳理svp_runtime模块</h3><h3 id="2-修改算法调用逻辑"><a href="#2-修改算法调用逻辑" class="headerlink" title="2. 修改算法调用逻辑"></a>2. 修改算法调用逻辑</h3><ul>
<li>格式转换<ul>
<li>HI_MAPI_FRAME_DATA_S  –&gt;  IVE_DATA_S</li>
<li>IVE_DATA_S –&gt; IVE_IMAGE_S</li>
<li>IVE_IMAGE_S –&gt; HI_RUNTIME_BLOB_S</li>
</ul>
</li>
<li></li>
</ul>
<h3 id="3-修复bug"><a href="#3-修复bug" class="headerlink" title="3. 修复bug"></a>3. 修复bug</h3><ul>
<li>flash_size &lt; model_size + app_size<ul>
<li>将模型拷贝到sd上，降低flash消耗</li>
<li>模型读取时要通过HI_MPI_SYS_MmzAlloc函数来分配内存空间<ul>
<li>MMZ被分为多个Zone，当第三个参数设置为NULL的时候，分配默认的null区域</li>
<li>在SDK的主目录中通过make menuconfig无法直接修改memory配置，需直接对.config文件进行修改，可相应的扩大null区域的大小</li>
<li>在Linux端可通过<code>cat /proc/media-meminfo</code>来查看媒体内存使用情况</li>
<li>在LiteOS端可通过<code>cat /proc/umap/media-meminfo</code>来查看liteos端的媒体内存使用情况</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h2><h3 id="4-bug修复"><a href="#4-bug修复" class="headerlink" title="4. bug修复"></a>4. bug修复</h3><p>- </p>
]]></content>
      <tags>
        <tag>work_havon</tag>
      </tags>
  </entry>
  <entry>
    <title>Hi3559V200获得视频流</title>
    <url>/2019/12/05/Hi3559V200%E8%8E%B7%E5%BE%97%E8%A7%86%E9%A2%91%E6%B5%81/</url>
    <content><![CDATA[<p>文中所述的获取视频帧的方式是统一的<br>但是我们仅针对SDK中的actioncam进行分析整理</p>
<h3 id="获取视频帧函数"><a href="#获取视频帧函数" class="headerlink" title="获取视频帧函数"></a>获取视频帧函数</h3><p><code>HI_MAPI_VPROC_GetPortFrame</code></p>
<h3 id="Getframe的要求"><a href="#Getframe的要求" class="headerlink" title="Getframe的要求"></a>Getframe的要求</h3><p><code>dump depth &gt; 0</code></p>
<h3 id="media-config文件解读"><a href="#media-config文件解读" class="headerlink" title="media config文件解读"></a>media config文件解读</h3><p>配置文件均放在actioncam/param/inicfg/Hi3559V200下</p>
<h4 id="mediamode"><a href="#mediamode" class="headerlink" title="mediamode"></a>mediamode</h4><p>定义最原始的media通路参数</p>
<h4 id="workmode"><a href="#workmode" class="headerlink" title="workmode"></a>workmode</h4><p>workmode中我们首先要关注的是poweron_action和poweron_workmode<br>首先我们的poweron_action默认为IDLE预览模式。但是我们的workmode中并没有对应的模式。</p>
<p>因此我们需要更进一步分析。</p>
<h3 id="VPSS"><a href="#VPSS" class="headerlink" title="VPSS"></a>VPSS</h3><h3 id="Vport"><a href="#Vport" class="headerlink" title="Vport"></a>Vport</h3><h3 id="Videodetect框架"><a href="#Videodetect框架" class="headerlink" title="Videodetect框架"></a>Videodetect框架</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9luxjpe9oj31nt0u0n70.jpg" alt="videodetect">{:height=100 width=50}</p>
]]></content>
      <tags>
        <tag>海思</tag>
      </tags>
  </entry>
  <entry>
    <title>用c语言操控sqlite3</title>
    <url>/2019/12/05/%E7%94%A8c%E8%AF%AD%E8%A8%80%E6%93%8D%E6%8E%A7sqlite3/</url>
    <content><![CDATA[<h3 id="C语言操控sqlite3"><a href="#C语言操控sqlite3" class="headerlink" title="C语言操控sqlite3"></a>C语言操控sqlite3</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callback</span><span class="params">(<span class="keyword">void</span> *, <span class="keyword">int</span>, <span class="keyword">char</span> **, <span class="keyword">char</span> **)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkvalue_callback</span><span class="params">(<span class="keyword">void</span> *value, <span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, </span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">char</span> **azColName)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"argc = %d\n"</span>, argc);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcmp</span>((<span class="keyword">char</span>*)value, argv[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    sqlite3 *db;</span><br><span class="line">    <span class="keyword">char</span> *err_msg = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rc = sqlite3_open(<span class="string">"test.db"</span>, &amp;db);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rc != SQLITE_OK) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Cannot open database: %s\n"</span>, </span><br><span class="line">                sqlite3_errmsg(db));</span><br><span class="line">        sqlite3_close(db);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *sql = <span class="string">"SELECT * FROM Cars"</span>;</span><br><span class="line">        </span><br><span class="line">    rc = sqlite3_exec(db, sql, callback, <span class="number">0</span>, &amp;err_msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* str = <span class="string">"value"</span>;</span><br><span class="line">    rc = sqlite3_exec(db, sql, callback_checkvalue, str, &amp;err_msg);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rc != SQLITE_OK ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to select data\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"SQL error: %s\n"</span>, err_msg);</span><br><span class="line"></span><br><span class="line">        sqlite3_free(err_msg);</span><br><span class="line">        sqlite3_close(db);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    sqlite3_close(db);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callback</span><span class="params">(<span class="keyword">void</span> *NotUsed, <span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, </span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">char</span> **azColName)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    NotUsed = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s = %s\n"</span>, azColName[i], argv[i] ? argv[i] : <span class="string">"NULL"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>main函数比较简单，只关注重点函数<code>sqlite3_exec()</code>就好</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqlite3_exec</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  sqlite3*,                                <span class="comment">/* An open database */</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">char</span> *sql,                         <span class="comment">/* SQL to be evaluated */</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> (*callback)(<span class="keyword">void</span>*,<span class="keyword">int</span>,<span class="keyword">char</span>**,<span class="keyword">char</span>**),  <span class="comment">/* Callback function */</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">void</span> *,                                    <span class="comment">/* 1st argument to callback */</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">char</span> **errmsg                              <span class="comment">/* Error msg written here */</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>关注一下callback函数，此处callback函数的第一个参数同时作为sqlite3_exec函数的第四个参数。而此参数的类型是<code>void*</code><br>关注一下上述的<code>callback_checkvalue</code>函数。<br>此函数内针对参数进行了类型转换。<br>我们首先在调用<code>sqlite3_exec</code>时保证了传入的参数类型为<code>char*</code>，此处这样做的目的是为了可以与<code>char **argv</code>形成对应。<br>虽然我们传入的时候保证了参数为<code>char*</code> 类型，但是在函数传值的时候又会将其默认为<code>void *</code>，因此我们在使用<code>strcmp</code>函数时，又将其进行了强制类型转换。</p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo new后用Typora自动打开文档</title>
    <url>/2019/12/04/hexo-new%E5%90%8E%E7%94%A8Typora%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="hexo-new-post后直接打开md文件"><a href="#hexo-new-post后直接打开md文件" class="headerlink" title="hexo new post后直接打开md文件"></a>hexo new post后直接打开md文件</h3><p>在hexo的根目录下新建文件夹scripts<br>然后创建一个js的文件，例如AutoOpenEditor.js</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">exec</span> = require(<span class="string">'child_process'</span>).<span class="built_in">exec</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 2.x</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>&#123;</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">'open -a "</span>/Applications/Typora.app<span class="string">" '</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>防火墙</title>
    <url>/2019/12/04/%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<p>防火墙</p>
<p><code>systemctl status ufw</code></p>
<p><code>systemctl status iptables</code></p>
<p><code>systemctl status firewalld</code></p>
<p><code>sudo firewall-cmd --add-port=8888/tcp --permanent</code></p>
<p><code>sudo firewall-cmd --reload</code></p>
<p><code>sudo systemctl stop firewalld</code></p>
<p>端口侦测</p>
<p><code>sudo lsof -i:8888</code></p>
<p><code>nc -vuz 210.75.252.41 80</code></p>
<p><code>traceroute 210.75.252.41</code></p>
<p>查看网络经过的路径</p>
<p><code>nmap</code></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>SSH安全连接</title>
    <url>/2019/12/03/SSH%E5%AE%89%E5%85%A8%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="SSH安全连接"><a href="#SSH安全连接" class="headerlink" title="SSH安全连接"></a>SSH安全连接</h3><p>修改 SSH 服务配置文件<code>/etc/ssh/sshd_config</code>提高SSH安全性</p>
<h3 id="关闭密码登录"><a href="#关闭密码登录" class="headerlink" title="关闭密码登录"></a>关闭密码登录</h3><p>修改<code>PasswordAuthentication</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">To</span> <span class="keyword">disable</span> tunneled clear <span class="type">text</span> passwords, change <span class="keyword">to</span> <span class="keyword">no</span> here!</span><br><span class="line"><span class="meta">#PasswordAuthentication yes</span></span><br><span class="line"><span class="meta">#PermitEmptyPasswords no</span></span><br><span class="line">PasswordAuthentication <span class="keyword">no</span></span><br></pre></td></tr></table></figure>



<p>复制公开密钥到远程服务器</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">copy</span>-id -i /<span class="type">path</span>/<span class="keyword">to</span>/<span class="built_in">public</span>-key-file <span class="keyword">user</span>@host</span><br></pre></td></tr></table></figure>



<h3 id="使用安全算法"><a href="#使用安全算法" class="headerlink" title="使用安全算法"></a>使用安全算法</h3><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Ciphers aes128-ctr,aes192-ctr,aes256-ctr</span><br><span class="line"></span><br><span class="line">HostKeyAlgorithms ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-rsa,ssh-dss</span><br><span class="line"></span><br><span class="line">KexAlgorithms ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256</span><br><span class="line"></span><br><span class="line">MACs hmac-sha2-256,hmac-sha2-512</span><br></pre></td></tr></table></figure>



<h3 id="使用安全性更好的密钥生成算法"><a href="#使用安全性更好的密钥生成算法" class="headerlink" title="使用安全性更好的密钥生成算法"></a>使用安全性更好的密钥生成算法</h3><p>使用<code>ed25519</code>或者<code>RSA 4096</code></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ssh</span>-keygen -t key_type -<span class="keyword">b </span><span class="keyword">bits </span>-C <span class="string">"comment"</span></span><br></pre></td></tr></table></figure>



<h3 id="禁止-Root-远程登录"><a href="#禁止-Root-远程登录" class="headerlink" title="禁止 Root 远程登录"></a>禁止 Root 远程登录</h3><p>修改<code>PermitRootLogin</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PermitRootLogin</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>



<h3 id="更换端口"><a href="#更换端口" class="headerlink" title="更换端口"></a>更换端口</h3><p>修改<code>Port</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Port <span class="number">1122</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCodeRemote</title>
    <url>/2019/12/03/VSCodeRemote/</url>
    <content><![CDATA[<p>有时我们希望在公司之外方便的进行开发。因此需要跨过跳板机进入公司内网。因此下面的操作就很有必要了。</p>
<h3 id="VSCode-remote"><a href="#VSCode-remote" class="headerlink" title="VSCode remote"></a>VSCode remote</h3><p>我们来编写一下配置<br><code>~/.ssh/config</code></p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9lwmnuf1lj30p60583z5.jpg" alt=""></p>
<h3 id="proxycommand"><a href="#proxycommand" class="headerlink" title="proxycommand"></a>proxycommand</h3><p><code>ssh -p 10099 huima@210.75.252.106 nc %h %p</code>  </p>
<p><code>-p</code> 跳板机的ssh端口<br><code>nc</code> netcat(nc) command<br><code>%h</code> Hostname 即<code>172.20.15.66</code><br><code>%p</code> Hostname的port，即<code>22</code>  </p>
<p><a href="https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/" target="_blank" rel="noopener">https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/</a></p>
]]></content>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
</search>
